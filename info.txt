rc=`cut -d. -f1 <<< build/jenkinslibrary.82 2>&1`
echo "build/jenkinslibrary" | sed -r 's/[/]+/-/g'
echo "$a" | tr '[:upper:]' '[:lower:]'

==================
// upload helm chart to ICP
// Loads a Helm chart archive to an IBM Cloud Private cluster. 
// Before you load a Helm chart, set up Docker and push your images to the private registry. 
// See Pushing and pulling images. 
bx pr load-helm-chart --archive helmchart.tgz --clustername dc1cp01.icp
cd /root/Downloads/ucd_6.2.7/charts
bx pr load-helm-chart --archive ibm-ucd-prod-1.0.0.974499.tgz --clustername dc1cp01.icp

---
// before upload chart, needs to initialize helm
echo "1" | bx pr login -u admin -p admin --skip-ssl-validation
echo "1" | bx pr login -u admin -p admin --skip-ssl-validation
helm init --client-only
helm init --client-only --skip-refresh
cd /root/Downloads/ucd_7.0.0/charts
bx pr load-helm-chart --archive ibm-ucd-prod-2.0.0.tgz --clustername dc1cp01.icp
// 6.2.7
cd /root/Downloads/ucd_6.2.7/charts
bx pr load-helm-chart --archive ibm-ucd-prod-1.0.0.974499.tgz --clustername dc1cp01.icp


===============================

var exit = properties.get('exitCode');

commandOut.println("exit = " + exit);

if (exit == 0) {
    properties.put('Status', 'Success');
    commandOut.println("exit == 0");
    
    scanner.register("STATUS: DEPLOYED", function(lineNumber, line) {
          var value = line.replace("STATUS: ", "");
          properties.put("Value", value);
          passed = 1;
      });
         
    scanner.scan();
    
    var currentValue = properties.get('Value');
    commandOut.println("currentValue = " + currentValue);

}
else {
    properties.put('Status', 'Failure');
    commandOut.println("else ...");
    var passed = 0;
    commandOut.println("initial passed = " + passed);

    scanner.register("STATUS: DEPLOYED", function(lineNumber, line) {
          var value = line.replace("STATUS: ", "");
          properties.put("Value", value);
          passed = 1;
      });
         
    scanner.scan();

    var currentValue = properties.get('Value');
    commandOut.println("currentValue = " + currentValue);


    if(passed == 1) {
        commandOut.println("passed is 1. found keyword. Override Failure and set status to Success !!!");
        properties.put('Status', 'Success');
    } else {
        commandOut.println("passed is not 1 -> keyword not found. Failure.");
    }
}

commandOut.println("Final step status = " + properties.get('Status'));


=================================
