def buildInfo = ''
def server = ''

def sendAnEmail(toAddresses, subj, myText) {
    emailext(to: toAddresses, subject: subj, body: myText)
}

def sendASlackMessage(channelName, colorValue, msg) {
  // hopefully one day we can put this back.  Until then... it's a comment...
  // slackSend(channel: channelName, color: colorValue, message: msg)
}

def pipelineBegin(message) {
    sendAnEmail('RD3630.CORE@bcbssc.com', 'PIPELINE BEGIN', message)
    sendASlackMessage('#rd3630', '#00FF00', message)
}

def pipelineFailure(message) {
    sendAnEmail('RD3630.CORE@bcbssc.com', 'PIPELINE FAILURE', message)
    sendASlackMessage('#rd3630', '#FF0000', message)
    currentBuild.result = 'FAILURE'
    error message
}

def pipelineUnstable(message) {
    sendAnEmail('RD3630.CORE@bcbssc.com', 'PIPELINE UNSTABLE', message)
    sendASlackMessage('#rd3630', '#FFFF00', message)
}

def pipelineSuccess(message) {
    sendAnEmail('RD3630.CORE@bcbssc.com', 'PIPELINE SUCCESS', message)
    sendASlackMessage('#rd3630', '#00FF00', message)
}

pipeline {
    agent {
        label 'docker-maven'
    }
    
    environment {
        MAVEN_VERSION = "Maven3.5"
        JAVA_VERSION = "JDK8"
        SLACK_CHANNEL = "#rd3630"
        ARTIFACTORY_ID = "Production Artifactory"
        TARGET_LOCATION = "commweb-groupadmin/target"
        FUNCTIONAL_TEST_LOCATION = ""
        EAR_FILE = "commweb-groupadmin-0.0.1-SNAPSHOT.ear"
    }
    
    tools {
        jdk "${env.JAVA_VERSION}"
    }
    
    stages {
        stage("Initialization") {
            steps {
                sh 'printenv'
                pipelineBegin("The Pipeline ${currentBuild.fullDisplayName} started build number ${BUILD_NUMBER} for branch ${BRANCH_NAME}. Follow along at $JOB_DISPLAY_URL if you'd like.")
            }
        }
        
        stage("BuildUnitTestScan") {
            steps { 
                script {
                    server = Artifactory.server "${env.ARTIFACTORY_ID}"
                    def rtMaven = Artifactory.newMavenBuild()
                    rtMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
                    rtMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
                    rtMaven.tool = "${env.MAVEN_VERSION}"
                    buildInfo = rtMaven.run pom: 'pom.xml', goals: 'javadoc:javadoc test install sonar:sonar -Dsonar.host.url=http://a70lpcomsnrq001.a70adom.bcbssc.com:8080'
                    sendASlackMessage("$SLACK_CHANNEL", '#00FF00', "${currentBuild.fullDisplayName} build stage completed successfully.")
                }
            }
        }
        
        stage("BlackDuck Scan") {
            steps {
                script {
                    hub_scan bomUpdateMaximumWaitTime: '5', cleanupOnSuccessfulScan: true, codeLocationName: 'My-Benefits-Companion-master', deletePreviousCodeLocations: true, dryRun: false, excludePatterns: [[exclusionPattern: '']], hubProjectName: 'MyBenefitsCompanion', hubProjectVersion: '2017-02-28', hubVersionDist: 'INTERNAL', hubVersionPhase: 'RELEASED', projectLevelAdjustments: true, scanMemory: '4096', scans: [[scanTarget: "${env.TARGET_LOCATION}/${env.EAR_FILE}"]], shouldGenerateHubReport: true, unmapPreviousCodeLocations: false
                    hub_scan_failure buildStateOnFailure: 'FAILURE', failBuildForPolicyViolations: true
                    if(currentBuild.result == 'FAILURE') {
                        pipelineFailure("${currentBuild.fullDisplayName} FAILED because of a BlackDuck Scan policy violations.")
                    }
                    sendASlackMessage("${env.SLACK_CHANNEL}", '#00FF00', "${currentBuild.fullDisplayName} BlackDuck scan completed successfully.")
                }
            }
        }
        
        stage("Publishing") {
            steps {
                script {
                    parallel "JavaDoc": {
                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'target/site/apidocs', reportFiles: 'index.html', includes: '**/*', reportName: 'JavaDoc', reportTitles: ''])
                    }, "SonarQube Standards": {
                        sh "echo 'SonarQube http://a70lpcomsnrq001.a70adom.bcbssc.com:8080/dashboard?id=com.bcbssc.groupadmin%3Ambc' > anchorChain.tsv"
                        withSonarQubeEnv('Production SonarQube') {
                        }
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            pipelineFailure("Pipeline aborted due to quality gate coverage failure: ${qualityGate.status}")
                        }
                        publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'target/site/sonar', reportFiles: 'index.html', includes: '**/*', reportName: 'SonarQube', reportTitles: ''])
                    }, "Artifact to JFrog": {
                    server.publishBuildInfo buildInfo
                    }
                    sendASlackMessage("$SLACK_CHANNEL",'#00FF00', "${currentBuild.fullDisplayName} publish stage completed successfully.")
                }
            }
		}
		
		stage("Deploy to Unit") {
		    steps {
		        script {
		            def ucdComponent = 'MHTK.MyBenefitsCompanion'
                    def ucdApplication = 'MHTK.MyBenefitsCompanion'
                    def ucdApplicationProcess = 'MHTK.MyBenefitsCompanion.DeployUnit5'
                    def ucdEnvironment = 'My-Benefits-Companion-Unit' 
        
                    sh "cp ${WORKSPACE}/filterset.properties ${WORKSPACE}/commweb-groupadmin/target/"
                    sh "cp ${WORKSPACE}/build.xml ${WORKSPACE}/commweb-groupadmin/target/"

                    step([$class: 'UCDeployPublisher',
                        siteName: 'UrbanCode Deploy Instance',
            
                        component: [
                            $class: 'com.urbancode.jenkins.plugins.ucdeploy.VersionHelper$VersionBlock',
                            componentName: "${ucdComponent}",
                          
                            delivery: [
                                $class: 'com.urbancode.jenkins.plugins.ucdeploy.DeliveryHelper$Push',
                                pushVersion: "${BUILD_NUMBER}",
                                baseDir: "${WORKSPACE}/commweb-groupadmin/target/",
                                fileIncludePatterns: '*',
                                fileExcludePatterns: '',
                                pushDescription: 'Pushed from Jenkins',
                                pushIncremental: false
                            ],
                        ],  
        
                        deploy: [
                            $class: 'com.urbancode.jenkins.plugins.ucdeploy.DeployHelper$DeployBlock',
                            deployApp: "${ucdApplication}",
                            deployEnv: "${ucdEnvironment}",
                            deployProc: "${ucdApplicationProcess}",
                            deployVersions: "${ucdComponent}:${BUILD_NUMBER}",
                            deployOnlyChanged: false
                        ]
                    ])

        	        sendASlackMessage("$SLACK_CHANNEL",'#00FF00', "${currentBuild.fullDisplayName} has deployed.")
        	    }
            }
        }
        
        stage("Validation Testing") {
            steps {
                script {
                    def jarMaven = Artifactory.newMavenBuild()
                    jarMaven.resolver server: server, releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot'
                    jarMaven.deployer server: server, releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local'
                    jarMaven.tool = "${env.MAVEN_VERSION}"
                    
                    dir ('MyBenefitsCompanion-functional-testing') {
                        def testInfo = jarMaven.run pom: "pom.xml", goals: "clean install"
                    }
                    
                    dir ('MyBenefitsCompanion-functional-testing/target') {
                        def status = sh(returnStatus:true, script: 'java -jar "MyBenefitsCompanion-functional-testing-0.0.1-SNAPSHOT.jar" JOHNSON test-output')
                        if (status != 0) {
                            pipelineFailure("${currentBuild.fullDisplayName} failed its functional testing step.")
                        }
                    }

                    sendASlackMessage("$SLACK_CHANNEL",'#00FF00', "${currentBuild.fullDisplayName} has completed post-deployment Validation Testing.")
                }
            }
        }
    }
    
    post {
        success {
            pipelineSuccess("${currentBuild.fullDisplayName} is complete.  Congratulations on another successful run!")
        }
        failure {
            pipelineFailure("${currentBuild.fullDisplayName} did something wrong, and got to the catch-all error message.  I fear something terrible has happened.")
        }
        aborted {
            pipelineSuccess("${currentBuild.fullDisplayName} was manually cancelled before it completed its run.")
        }
    }
}