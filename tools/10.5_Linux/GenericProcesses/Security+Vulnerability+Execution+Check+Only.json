{
    "name": "Security Vulnerability Execution Check Only",
    "description": "Validates the pre-deployment poliocies for production deployments only",
    "rootActivity": {
        "edges": [
            {
                "to": "Verify HP Fortify Scan Execution",
                "type": "ALWAYS",
                "value": ""
            },
            {
                "to": "4d80b556377fc67852aded90ff38fc",
                "from": "Verify HP Fortify Scan Execution",
                "type": "SUCCESS",
                "value": ""
            }
        ],
        "offsets": [
            {
                "name": "4d80b556377fc67852aded90ff38fc",
                "x": -5,
                "y": 480,
                "h": 90,
                "w": 140
            },
            {
                "name": "Verify HP Fortify Scan Execution",
                "x": -210,
                "y": 240,
                "h": 90,
                "w": 550
            }
        ],
        "layoutMode": "auto",
        "type": "graph",
        "name": "2badadb2-d8e7-4097-b5e5-bdb9a90bc79a",
        "children": [
            {
                "type": "finish",
                "name": "4d80b556377fc67852aded90ff38fc",
                "children": []
            },
            {
                "allowFailure": false,
                "useImpersonation": false,
                "showHidden": false,
                "impersonationUseSudo": false,
                "pluginVersion": 6,
                "commandName": "Run Groovy Class With UCD API Access",
                "pluginName": "Groovy for UCD Scripting",
                "authTokenRestriction": "20000001-0001-0001-0001-000000000000",
                "properties": {
                    "groovyScript": "import com.ibm.css.ucd.application.Application\nimport com.ibm.css.ucd.component.Component\nimport com.ibm.css.ucd.component.version.ComponentVersion\nimport com.ibm.css.ucd.services.UcdConnectionServices\nimport com.ibm.css.ucd.snapshot.Snapshot\nimport com.ibm.css.ucd.status.ComponentVersionStatus\nimport com.ibm.issr.core.log.Logger\nimport com.ibm.issr.provision.hook.ScriptWithUcdServicesHook\nimport com.ibm.css.ucd.status.ComponentVersionStatusInstance\n\n\/**\n * Groovy script class which has access to UCD API Services.\n *\n *\/\nclass TestForComponentVersionStatus extends ScriptWithUcdServicesHook {\n        \/\/***************************\n        \/\/  UCD PARAMETERS\n        \/\/***************************\n\n        String applicationId = \"${p:applicationId}\"\n        String snapshotName = \"${p:snapshotName}\"\n        String statusName = \"${p:statusName}\"\n\t\tString componentPropertyName = \"${p:componentPropertyName}\" \n\t\t\n\n\n\n        \/**\n         * This is the script function that is executed.\n         * @param ucdConnectionServices UCD API Services\n         *\/\n        public void runScript(UcdConnectionServices ucdConnectionServices, Properties outProps ) {\n                Logger.info \"Testing for component version status: \" + statusName\n                Logger.info \"Application ID: \" + applicationId\n                Logger.info \"Snapshot name: \" + snapshotName\n\n                \/\/ Get the application\n                Application application = ucdConnectionServices.getApplicationServices().getApplicationById(applicationId)\n                Logger.info \"Found application ID \" + application.id\n\n                \/\/ Get the snapshot\n                Snapshot snapshot = application.getSnapshot(snapshotName)\n                Logger.info \"Found snapshot ID \" + snapshot.id\n\n                \/\/ Get the list of Component Versions in the snapshot\n                List componentVersions = snapshot.getComponentVersionObjects()\n\n\t\t\t\tString foundString = \"\"\n\t\t\t\tString notFoundString = \"\"\n\t\t\t\tboolean foundForSomeComponentVersions = false\n                boolean foundForAllComponentVersions = true\n\n                componentVersions.each { ComponentVersion componentVersion ->\n\t\t\t\t\t\t\n\t\t\t\t\tboolean required = componentVersion.getComponent().getComponentProperty(componentPropertyName)\n\t\t\t\t\t\t\n\t\t\t\t\tif (required == true) {\n\n                        \/\/ Get the list of status flags\n                        List statusFlags = componentVersion.getComponentVersionStatuses()\n                        boolean found = false\n\n                        statusFlags.each { ComponentVersionStatusInstance status ->\n\t\t\t\t\t\t\tif (status.name == statusName) {\n                                \/\/ FOUND\n                                found = true\n\t\t\t\t\t\t\t\tfoundForSomeComponentVersions = true\n\t\t\t\t\t\t\t\tLogger.info \"Version status \" + statusName + \" FOUND for component version name: \" + componentVersion.name + \", component version ID: \" + componentVersion.id + \", from component named: \" + componentVersion.component.name\n\t\t\t\t\t\t\t\tfoundString = foundString + \"\\nComponent version name: \" + componentVersion.name + \", component version ID: \" + componentVersion.id + \", from component named: \" + componentVersion.component.name\n\t\t\t\t\t\t\t}\n                        }\n\t\t\t\t\t\t\tif (! found) {\n\t\t\t\t\t\t\t\tfoundForAllComponentVersions = false\n\t\t\t\t\t\t\t\tLogger.error \"Version status \" + statusName + \" NOT FOUND for component version name: \" + componentVersion.name + \", component version ID: \" + componentVersion.id + \", from component named: \" + componentVersion.component.name\n\t\t\t\t\t\t\t\tnotFoundString = notFoundString + \"\\nComponent version name: \" + componentVersion.name + \", component version ID: \" + componentVersion.id + \", from component named: \" + componentVersion.component.name                            \n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n                }\n\t\t\t\t\n\t\t\t\tLogger.info \"foundForAllComponentVersions? \" + foundForAllComponentVersions\n                \n                outProps.put( \"foundForAllComponentVersions\", foundForAllComponentVersions.toString() )\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (foundForAllComponentVersions) {\n\t\t\t\t\tfoundString = \"ALL of the following scannable component versions in the snapshot PASSED the HP Fortify Scan:\" + foundString\n\t\t\t\t\tLogger.info foundString\n\t\t\t\t}\n\t\t\t\telse if ((! foundForAllComponentVersions) && foundForSomeComponentVersions) {\n\t\t\t\t\tthrow new Exception (\"The following scannable component versions in the snapshot passed the HP Fortify Scan:\" + foundString + \"\\n\" + \"The following scannable component versions in the snapshot failed the HP Fortify Scan:\" + notFoundString) \n\t\t\t\t}\n\t\t\t\telse if (! foundForAllComponentVersions) {\n\t\t\t\t\tnotFoundString = \"ALL of following scannable component versions in the snapshot FAILED the HP Fortify Scan:\" + notFoundString\n\t\t\t\t\tthrow new Exception (notFoundString)\n\t\t\t\t}\n\t\t\t\t\n\n        }\n}\n",
                    "groovyScriptClassname": "GroovyScript",
                    "loggingLevel": "info"
                },
                "cachedAuthTokenRestriction": {
                    "name": "System Default",
                    "description": "Used by default for any plugin steps without a specified token restriction",
                    "restrictions": [{
                        "verb": "ALL",
                        "url": "\/*"
                    }]
                },
                "type": "plugin",
                "name": "Verify HP Fortify Scan Execution",
                "children": []
            }
        ]
    },
    "properties": [
        {
            "name": "contextType",
            "value": "Resource",
            "description": "",
            "secure": false
        },
        {
            "name": "defaultResourceId",
            "value": "169108c4-1b15-f001-91b8-7b917a558e4e",
            "description": "",
            "secure": false
        },
        {
            "name": "workingDir",
            "value": "${p:resource\/work.dir}\/${p:process.name}",
            "description": "",
            "secure": false
        }
    ],
    "propDefs": [
        {
            "name": "applicationId",
            "label": "applicationId",
            "pattern": "",
            "type": "TEXT",
            "value": "${p:application.id}",
            "required": true,
            "description": "",
            "placeholder": ""
        },
        {
            "name": "statusName",
            "label": "statusName",
            "pattern": "",
            "type": "TEXT",
            "value": "APPSEC_SCAN_PASSED",
            "required": true,
            "description": "",
            "placeholder": ""
        },
        {
            "name": "snapshotName",
            "label": "snapshotName",
            "pattern": "",
            "type": "TEXT",
            "value": "${p?:snapshot.name}",
            "required": true,
            "description": "",
            "placeholder": ""
        },
        {
            "name": "componentPropertyName",
            "label": "componentPropertyName",
            "pattern": "",
            "type": "TEXT",
            "value": "appsecScanRequired",
            "required": true,
            "description": "componentPropertyName",
            "placeholder": ""
        }
    ],
    "teamMappings": [
        {
            "teamId": "165d3f60-4fd3-b550-da46-4ad17df78248",
            "teamLabel": "KanBonChon",
            "resourceTypeId": "20000000000000000000000000000109",
            "resourceTypeName": "Process"
        },
        {
            "teamId": "165d8ae1-937f-b4ed-b877-3d88eb0c24b2",
            "teamLabel": "EDI RED Team",
            "resourceTypeId": "20000000000000000000000000000109",
            "resourceTypeName": "Process"
        },
        {
            "teamId": "1689ac34-de9a-bdef-7bab-8f37442a320f",
            "teamLabel": "DEVOPS ENGG TEAM",
            "resourceTypeId": "20000000000000000000000000000109",
            "resourceTypeName": "Process"
        }
    ],
    "linkedProcesses": []
}