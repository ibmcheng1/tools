@Library("bcbsscMavenPipeline") _

def ARTIFACT_PATH = ""

def volumes = [ hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock') ]
volumes += secretVolume(secretName: 'jenkins-docker-sec', mountPath: '/jenkins_docker_sec')
volumes += secretVolume(secretName: 'jenkins-helm-secret', mountPath: '/jenkins_helm_sec')

podTemplate(label: 'commercial-desktop-build-july5', nodeUsageModel: 'EXCLUSIVE',
            nodeSelector: 'beta.kubernetes.io/arch=amd64',
    containers: [
        containerTemplate(name: 'jnlp', image: 'dc1cp01.icp:8500/default/jnlp-slave'),
        containerTemplate(name: 'node', image: 'dc1cp01.icp:8500/default/node:june2018.2', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker', image: 'dc1cp01.icp:8500/default/docker:17.12-june2018.1', ttyEnabled: true, command: 'cat')
    ],
    volumes: volumes
) {
    node ('commercial-desktop-build-july5') {
    
        def APPLICATION_NAME = "commercial-desktop"
        def COMPONENT_NAME = "commercial-desktop"
        def DEPLOY_PROCESS = "Deploy-commercial-desktop"
        def commitId = "";
        def imageTag = "";
        
        stage('Checkout') {
            commitId = codeCheckout(BRANCH_NAME)
            imageTag = "dc1cp01.icp:8500/commercial-desktop/commercial-desktop:${commitId}"
        }
        stage('Build Application') {
            npmBuild()
        }
        stage('Open-Source Security Scan') {
            // blackduckScan()
        }
        stage('Build Container') {
            dockerBuild(imageTag, APPLICATION_NAME)
        }
        // Unit Deployment
        stage ('UrbanCode Deploy to Dev') { 
            ucdDeploy(commitId, "Dev", true, APPLICATION_NAME, COMPONENT_NAME, DEPLOY_PROCESS)
        }
        // Functional Testing in Unit
        stage ('Automated Regression Test') {
          echo "STUB: SELENIUM TESTING WILL GO HERE WHEN I GET AROUND TO IT"
        }                
        // System Deployment
        stage ('UrbanCode Deploy to System') { 
            ucdDeploy(commitId, "System", false, APPLICATION_NAME, COMPONENT_NAME, DEPLOY_PROCESS)
        }
        
        
    }
}
